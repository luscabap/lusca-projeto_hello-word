[
    {
        "id": 10,
        "titulo": "TESTESSSSSSSS",
        "texto": "> Fonte: <https://www.alura.com.br/artigos/python-origem-do-nome> \n\n Por que uma das linguagens de programação mais amada no mundo tem esse nome e qual a origem dele? Tem relação com algum tipo de cobra? Descubra isso e muito mais neste artigo! \n\n ### Um pouco de história \n\n [Guido Van Rossum](https://pt.wikipedia.org/wiki/Guido_van_Rossum) criou o [Python](https://www.alura.com.br/cursos-online-programacao/python) em 1989. Ele trabalhava no [Centrum Voor Wiskunde en Informatica](https://www.cwi.nl/) no início dos anos 1980, e seu trabalho era implementar a linguagem de programação conhecida como [ABC](https://pt.wikipedia.org/wiki/ABC_(linguagem_de_programa%C3%A7%C3%A3o)).  \n\n Durante o final dos anos 1980, enquanto ainda estava no CWI, ele começou a procurar por uma linguagem de script que tivesse sintaxe semelhante ao ABC, mas que tivesse acesso às chamadas de sistema do [Amoeba](https://pt.wikipedia.org/wiki/Amoeba_sistema_operacional). Após procurar e não encontrar nenhuma linguagem que atendesse às suas necessidades, Rossum decidiu projetar uma linguagem de script simples que pudesse superar as inadequações do ABC.  \n\n No final da década de 1980, Rossum começou a desenvolver o novo script, e em 1991, lançou a versão de abertura da linguagem de programação. Esta primeira versão tinha um sistema de módulo [Modula-3](https://pt.wikipedia.org/wiki/Modula-3), linguagem que foi posteriormente denominada “Python”. \n\n ### Certo, mas de onde vem esse nome? \n\n Muitas pessoas costumam pensar que o nome Python tem origem em um tipo de cobra, já que o logotipo do Python mostra a imagem de uma cobra azul e amarela. \n\n ![gif do logo da linguagem de programação python](/assets/posts/1/gif-1.gif)  \n\n No entanto, a verdadeira história por trás da nomenclatura é um pouco diferente.  \n\n Na década de 1970, a BBC tinha um programa de TV popular do qual van Rossum era um grande fã chamado [Fly Circus de Monty Python](https://pt.wikipedia.org/wiki/Monty_Python%27s_Flying_Circus), ou apenas Monty Python para os íntimos.  \n\n Assim, quando desenvolveu a linguagem, ele pensou que precisava de um nome que fosse curto, único e um pouco misterioso, e por algum motivo que só ele conhecia, decidiu chamar o projeto de ‘Python’. \n\n ![homem saindo de uma loja](/assets/posts/1/gif-2.gif) \n\n E se você fosse criar sua própria linguagem de programação, qual nome daria? Faria uma homenagem a sua série, jogo ou filme favorito? \n\n No nosso [curso de python](https://www.alura.com.br/cursos-online-programacao/python), que é uma formação completa, entramos também em outras curiosidades da linguagem e sua história, pois a comunidade é muito forte e toma decisões importantes. \n\n ### Conclusão \n\n Atualmente, [o Python é uma tendência mundial no mundo das pessoas que desenvolvem](https://blog.revelo.com.br/desenvolvedores-python-estao-em-alta-no-mercado/), já que pode ser aplicado em diferentes cenários, como: Data Science, aplicações web, desenvolvimento Back-End, criação de jogos e scripts. \n\n Quer aprender mais sobre Python? Veja: \n\n - [Python do zero - Formação na linguagem mais querida do momento](https://www.alura.com.br/formacao-Python-linguagem) \n\n - [Python para Web - Formação Django](https://www.alura.com.br/formacao-django) \n\n - [API com Python - Curso Django Rest Framework](https://www.alura.com.br/curso-online-api-django-3-rest-framework) \n\n - [TDD com Python - Desenvolvimento guiado por testes](https://cursos.alura.com.br/course/tdd-django-3-testes) \n\n - [Pacman com Python - Criando um jogo com Pygame](https://www.alura.com.br/curso-online-python-pygame-pacman-colisao-pontuacao) \n\n "
    },
    {
        "id": 11,
        "titulo": "MAAAAAAUZ",
        "texto": "> Fonte: <https://www.alura.com.br/artigos/node-js-definicao-caracteristicas-vantagens-usos> \n\n  ### Introdução \n\n Node.JS é uma ferramenta amplamente utilizada no universo de desenvolvimento e todos que atuam na área de tecnologia já ouviram falar, nem que seja nos milhares de anúncios de cursos ou mesmo de vagas. Mas você se pergunta: afinal, o que é Node.js? Para que serve? Como ele atua \n\n \n\n Calma que, antes de olhar para o ambiente Node.JS, precisamos entender um pouco sobre o que é o JavaScript e como ele funciona. Vamos lá! \n\n \n\n ### Node.JS e JavaScript \n\n \n\n JavaScript é uma linguagem de programação que originalmente foi desenvolvida para trazer maior interatividade aos **websites** através da manipulação do *DOM* (Document Object Model). Vamos conferir a definição do livro que é uma referência na temática, o **Eloquent JavaScript** \n\n \n\n > O JavaScript foi introduzido em 1995 como uma forma de adicionar dinamicidade à páginas da web no navegador Netscape Navigator. Desde então, a linguagem foi adotada por todos os outros principais navegadores gráficos da web. Ela tornou possíveis o desenvolvimento das aplicações modernas  da web - aplicações com os quais você pode interagir diretamente sem recarregar a página a cada ação. JavaScript também é usado em sites mais tradicionais para fornecer várias formas de interatividade de forma mais inteligente \n\n  \n\n >Fonte: [Tradução livre do livro Eloquent JavaScript](https://eloquentjavascript.net/00_intro.html) \n\n \n\n Portanto, de forma resumida, podemos entender que o **JavaScript** foi pensado para ser rápido, dinâmico e acessível. A *linguagem interpretada* possibilita subir ou trabalhar em suas aplicações sem precisar  configurar todo um ambiente complexo. \n\n \n\n Essas características motivaram o engenheiro de software Ryan Dahl a desenvolver um ambiente, como um programa que você instala no seu computador, que trabalha com a linguagem JavaScript fora do navegador e pelo lado do servidor, via terminal, de uma maneira menos restritiva \n\n \n\n ### Tudo bem, mas e o Node.JS? \n\n  \n\n O JavaScript nasceu para atender demandas voltadas ao Front e como as necessidades aumentam de acordo com o crescimento tecnológico, surgiu a ideia de utilizar uma mesma linguagem no lado do cliente e do servidor para otimizar processos e serviços. Dessa forma, o Node.JS  aparece como uma alternativa viável para programação Back-End por se tratar de um ambiente para desenvolvimento utilizando a linguagem JavaScript \n\n \n\n De acordo com sua definição oficial, o Node é um **runtime**, que nada mais é do que um conjunto de códigos, API’s, ou seja, são bibliotecas responsáveis pelo tempo de execução (é o que faz o seu programa rodar) que funciona como um interpretador de JavaScript fora do ambiente do **navegador web**. \n\n \n\n É importante frisar que o Node.JS é um ambiente de execução assíncrono, isto é, ele trabalha de modo a não bloquear no momento da execução da aplicação, delegando os processos demorados a um segundo plano. \n\n \n\n Ele dá muito certo  com os servidores de arquitetura **“single threaded”**, isto significa que todos os pedidos para o servidor são executados no mesmo tópico - em vez de serem gerados em processos separados. Um dos grandes diferenciais da parceria Node.JS e Javascript é o bom desempenho no uso de APIs, já que o Javascript faz bastante uso de APIs assíncronas \n\n \n\n Você deve estar se perguntando: “Beleza, já entendi o que é o Node.JS e seu diferencial quando o assunto é o seu uso com o Javascript, mas o que isso significa?” Vamos entender um pouco mais... vem comigo, que te explico.. \n\n \n\n #### Como o Node.JS funciona \n\n \n\n O **Node é capaz de interpretar um código JavaScript**, igual ao que o navegador faz. Sendo assim, quando o navegador recebe um comando em JavaScript, ele o interpreta e depois executa as instruções fornecidas. \n\n \n\n O Node é fantástico (totalmente “sem parcialidade”, aqui pessoal, juro!)  porque torna possível o envio de instruções (os nossos códigos) sem precisar de um navegador ativo, basta ter o Node.JS instalado e utilizar o terminal para executar um programa construído em JavaScript.  \n\n \n\n Além disso, você pode utilizar apenas uma linguagem de programação para tratar requisições entre cliente e servidor. Sensacional, não é? \n\n \n\n Para que todo esse processo seja possível de ocorrer fora do navegador, o Node utiliza uma outra ferramenta chamada de **Chrome's V8 JavaScript Engine.** É esse motor V8 do Chrome que compila e executa o código JavaScript no lugar de apenas interpretá-lo. \n\n \n\n *Ainda parece muito confuso? Vem comigo que te explico melhor… \n\n \n\n O motor V8 da Google é o centro, o coração que processa todo o código JavaScript do navegador para que sua máquina compreenda e disponibilize os recursos e interações. Só é possível visualizar páginas em JavaScript ou trabalhar com um código pelo Node.JS devido ao processamento do motor V8 do Chrome. \n\n \n\n Graças ao núcleo baseado em JavaScript e no motor V8 da Google, o Node.JS possui algumas características que, dependendo do cenário, podem ser consideradas como *benefícios* da plataforma, vamos conferir algumas \n\n \n\n ### Características do Node.Js \n\n \n\n Node.JS pode ser utilizado nas famosas APIS Rest, web scrapping, chatbots, IoT, web servers, aplicações Desktop, tudo devido a sua característica altamente versátil. Dentre as principais, podemos citar \n\n \n\n - **Multiplataforma:** permite criar desde aplicativos desktop, aplicativos móveis e até sites SaaS \n\n - **Multi-paradigma:** é possível programar em diferentes paradigmas, como: Orientado a Objetos, funcional, imperativo e dirigido à eventos \n\n - **Open Source:** é uma plataforma de código aberto, isso significa que você pode ter acesso ao código fonte do Node.JS e realizar suas próprias customizações ou mesmo contribuir para a comunidade de forma direta \n\n - **Escalável:** Node.JS  foi criado para construir aplicações web escaláveis, como podemos ver na sua [documentação oficial]( https://nodejs.org/en/about/) \n\n \n\n O Node.JS ainda apresenta uma curva de aprendizado relativamente menor comparado à outras linguagens voltadas ao Back-End e possui uma comunidade gigante disposta a ajudar. E sem dúvida a união dessas forças é o **super poder do Node.JS** \n\n \n\n ### Empresas que usam Node.Js \n\n \n\n Tudo bem, falamos das inúmeras qualidades do Node.JS mas, na prática… onde eu posso trabalhar com a ferramenta \n\n \n\n Por conta dos *super-poderes* do Node.JS, uma gama de gigantes no mercado atua diretamente com a plataforma em suas regras de negócio, confere só a listinha de algumas \n\n \n\n - **NetFlix:** substituiu o renderizador baseado em Java pelo de JavaScript com Node.JS para diminuir o tempo de espera nas requisições dos usuários e conseguiu uma redução de cerca de 1 minuto \n\n - **IBM:** criou o The Canary in the Gold Mine (CITGM), um utilitário de testes amplamente utilizado pela companhia \n\n - **LinkedIn:** o aplicativo **mobile** da maior rede profissional é construído em Node e HTML5, você pode conferir a matéria na íntegra [aqui](https://venturebeat.com/2011/08/16/linkedin-node/) \n\n - **Uber:** sistema de relacionamento entre usuários e condutores foi construído em Node.JS por conta de sua rápida resposta \n\n \n\n E... pasmem! Node.js foi inclusive utilizado pela **NASA** para criar uma API que integra três bases de dados em um só, justamente para otimizar o acesso aos dados. [Node.JS ajuda NASA a manter Astronautas seguros e arquivos acessíveis - **em inglês**](https://openjsf.org/wp-content/uploads/sites/84/2020/02/Case_Study-Node.js-NASA.pdf) \n\n \n\n Node.JS está mesmo voando!! \n\n \n\n ### Meu primeiro código em Node.Js \n\n \n\n Para rodar a plataforma na sua máquina é necessário instalar o Node.JS. Caso você ainda não tenha, siga o tutorial [**Instalando o Node.JS no Windows e linux**](https://www.alura.com.br/artigos/instalando-nodejs-no-windows-e-linux#:~:text=Ap%C3%B3s%20baixar%20o%20instalador%2C%20basta,gostaria%20de%20instalar%20outras%20ferramentas.) \n\n \n\n E depois colocar a mão no código \n\n \n\n Aquele “Hello World!” para dar sorte:\n\n \n\n ```\n\n console.log(‘Hello, World!’)\n\n ```\n\n \n\n E agora você pode subir seu primeiro servidor:\n\n \n\n ```\n\n const http = require('http');\n\n const server = http.createServer(function (req, res) {\n\n res.writeHead(200, {'Content-type': 'text/html'});\n\n res.end('Hello Node!');\n\n });\n\n server.listen(3000);\n\n console.log('Servidor funcionando. Acesse: localhost:3000');\n\n ```\n\n \n\n Ah, é importante lembrar que aqui o código está de acordo com a última versão estável, a versão LTS (Long-term support ou suporte de longo prazo, em português). Mas o Node trouxe uma novidade muito bacana em sua nova versão, olha só no artigo [**Revolução no Node.js: adeus ao Axios e Node-fetch na versão 17.5.0**](https://www.alura.com.br/artigos/revolucao-node-js-adeus-axios-fetch-api-versao-17-5-0).\n\n \n\n Agora é só comemorar e aprofundar seus estudos em Node.JS!"
    },
    {
        "id": 12,
        "titulo": "MAAAAAAAAAAAAAAAAADSADSADAS",
        "texto": "> Fonte: <https://www.alura.com.br/artigos/o-que-e-json-web-tokens> \n\n  Você já foi em algum evento que precisou apresentar um **documento de identificação** para comprovar que você era realmente a pessoa que comprou o ingresso? O ato de solicitar o documento de identificação é uma forma de **autenticação** para que você receba a **autorização** para entrar. Na web, esse processo funciona de forma parecida. Para fazer requisições de alguns serviços ou acessar páginas específicas, você precisa se identificar de alguma forma, e essa identificação precisa ser segura e única.  \n\n Neste artigo você vai compreender o que é o padrão JWT (sigla para “JSON Web Tokens”) para autenticação, muito usado na web. Também veremos: \n\n  \n\n - O que é um token; \n\n - Para que serve e quando usar um JWT; \n\n - Como criar e verificar seu JWT token. \n\n  \n\n ### O que é um token? \n\n  \n\n Atualmente, ouvimos muito a palavra token relacionada a NFTs (sigla para “Tokens não fundíveis” em português), metaverso, criptomoedas, etc. Porém, fora desse meio, um token é uma **assinatura digital**, **uma chave**.  \n\n  \n\n Quando você abre uma conta em um banco, você precisa definir uma senha e seus dados pessoais. Esses dados são convertidos em uma assinatura digital que vai identificar você de **forma única** para aquele banco e, toda vez que você acessar seu banco e entrar com sua senha e um dado pessoal, o banco entenderá e **confirmará** que você é aquele usuário logado, semelhante a entrarmos no evento quando apresentamos nosso documento de identidade. \n\n  \n\n Existem vários algoritmos e padrões que transformam suas informações em um token, isto é, uma chave de autenticação única, que faz sentido para o serviço ou aplicação que esteja tentando acessar no momento. Um desses padrões é o JWT, que é seguro por permitir uma autenticação entre duas partes através de um **token assinado**. \n\n  \n\n ### O que é JWT? \n\n  \n\n Um JWT é um padrão para autenticação e troca de informações definido pela [RFC7519](https://datatracker.ietf.org/doc/html/rfc7519). Nele é possível armazenar de forma segura e compacta [objetos JSON](https://www.alura.com.br/artigos/o-que-e-json). Este token é um código Base64 e pode ser assinado usando um segredo ou par de chaves privadas/públicas. \n\n  \n\n Tokens assinados podem verificar a integridade das informações contidas neles, diferente de tokens criptografados que ocultam essas informações. Se um JWT é assinado por um par de chaves pública/privada, a **assinatura** certifica que a parte que possui a chave privada é quem de fato assinou.  \n\n  \n\n #### Quando e onde eu posso usar um JWT? \n\n  \n\n Você pode usar, por exemplo, em um cenário de **autorização.** Depois que o usuário estiver conectado, é possível observar cada solicitação e verificar se esta inclui o JWT, permitindo que o usuário acesse rotas, serviços e outros recursos. \n\n  \n\n Outro cenário de utilização de JWTs são as **trocas de informações** pois, como eles são assinados, é possível ter certeza de que os remetentes são quem dizem ser quem são. Além disso, podemos identificar se o conteúdo da assinatura foi alterado ou não devido à composição de um JWT. \n\n  \n\n #### Como surgiu o JWT? \n\n  \n\n Ele faz parte de uma família de especificações: a família JOSE. \n\n  \n\n JOSE significa JSON *Object Signing and Encryption*, em português **Assinatura e criptografia de objetos JSON**. O JWT faz parte dessa família de especificações e representa o token. Abaixo, você confere outras especificações desta família: \n\n  \n\n - JWT (JSON Web Tokens): representa o token propriamente dito; \n\n - JWS (JSON Web Signature): representa a assinatura do token; \n\n - JWE (JSON Web Encryption): representa a assinatura para criptografia do token; \n\n - JWK (JSON Web Keys): representa as chaves para a assinatura; \n\n - JWA (JSON Web Algorithms): representa os algoritmos para assinatura do token. \n\n  \n\n Agora que você já sabe o que é, para que serve e quando usar um JWT, vamos entender mais a fundo como funciona e quais os componentes de um JWT. Vem comigo! \n\n  \n\n ### Componentes básicos de um JSON Web Token \n\n  \n\n Um JWT possui uma estrutura básica composta pelo _header_, _payload_ e a _signature_. Essas três partes são separadas por pontos ( `.` ). Dessa forma, seria algo do tipo: `header.payload.signature`. Vamos entender melhor cada uma dessas partes! \n\n  \n\n #### Header \n\n  \n\n Headers é o cabeçalho do token onde passamos basicamente duas informações: o `alg` que informa qual algoritmo é usado para criar a assinatura e o `typ` que indica qual o tipo de token. \n\n   \n\n  \n\n ```jsx \n\n { \n\n \"alg\": \"HS256\", \n\n \"typ\": \"JWT\" \n\n } \n\n ``` \n\n  \n\n #### Payload \n\n  \n\n O payload é o componente onde podemos encontrar os dados referentes à autenticação como senha e email, por exemplo. \n\n  \n\n ```jsx \n\n { \n\n \"email\": \"nome@alura.com.br\", \n\n \"password\": \"HuEKW489!j445*\" \n\n } \n\n ``` \n\n  \n\n #### Signature \n\n  \n\n A assinatura do token (_signature_) é composta pela codificação do header e do payload somada a uma chave secreta e é gerada pelo algoritmo especificado no cabeçalho. \n\n  \n\n ```jsx \n\n HS256SHA256( \n\n base64UrlEncode(header) + \".\" + base64UrlEncode(payload), secret_key) \n\n ``` \n\n  \n\n O resultado são três strings separadas por pontos que podem ser facilmente utilizadas em ambientes HTML e protocolos HTTP. \n\n  \n\n ```jsx \n\n eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. \n\n eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ. \n\n SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c \n\n ``` \n\n  \n\n Agora que entendemos como é “por dentro” um JWT vamos criar nosso próprio JSON Web Token! \n\n  \n\n ### Criando um jwt token \n\n  \n\n Para começar, vamos criar uma pasta chamada `jwt` no diretório que você desejar. Crie um arquivo javascript com o nome que escolher, eu estou utilizando `index.js`. Faça a instalação da `lib jwt` que escolher. Existem diversas libs que ajudam na geração de JWTs. Irei utilizar a [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken) que é uma das mais populares, mas você pode ficar à vontade para explorar outras opções. \n\n  \n\n O primeiro passo é importar a lib no nosso arquivo: \n\n  \n\n ```jsx \n\n const jwt = require('jsonwebtoken'); \n\n ``` \n\n  \n\n  Agora criamos a nossa chave secreta. A ideia é que só você saiba a sua chave secreta e que ela seja difícil a fim de dificultar a ação de ataques maliciosos. A minha ficou desse jeito: \n\n  \n\n ```jsx \n\n const secretKey = 'skljaksdj9983498327453lsldkjf'; \n\n ``` \n\n  \n\n Feito isso, vamos criar nosso token utilizando o método `sign`. Este método aceita como parâmetros o payload, a chave secreta e o header, nesta ordem. \n\n  \n\n ```jsx \n\n const nossoToken = jwt.sign( \n\n   { \n\n email: 'nome@alura.com.br', \n\n password: 'HuEKW489!j445*', \n\n   }, \n\n   secretKey, \n\n   { \n\n expiresIn: '1y', \n\n subject: '1', \n\n   } \n\n ); \n\n ``` \n\n  \n\n Para este JWT, eu estou informando um email e senha no payload; minha chave secreta; e no header estou informando um **subject,** que na biblioteca deste exemplo funciona como um id. Além disso, estou dizendo que nosso token **expira** em 1 ano. Por padrão, o algoritmo de codificação é o HS256. \n\n  \n\n Para visualizar a saída em nosso terminal, utilizei a biblioteca **Nodemon** que você pode instalar e ver como funciona acessando [este link](https://www.npmjs.com/package/nodemon). O nodemon é uma ferramenta que ajuda a desenvolver aplicativos baseados em Node.js, reiniciando automaticamente o aplicativo quando são detectadas alterações de arquivo no diretório. \n\n  \n\n Podemos ver nosso token gerado passando a variável `nossoToken` em um `console.log`: \n\n  \n\n ```jsx \n\n console.log(nossoToken); \n\n ``` \n\n  \n\n A saída deve ser: \n\n  \n\n ```jsx \n\n eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5vbWVAYWx1cmEuY29tLmJyIiwicGFzc3dvcmQiOiJIdUVLVzQ4OSFqNDQ1KiIsImlhdCI6MTY1MTY4MzUxNywiZXhwIjoxNjgzMjQxMTE3LCJzdWIiOiIxIn0.t0UuIAxJ1NPXANtlBOKfHfLsePF4LRPu4RA2WMkJl6A \n\n ``` \n\n  \n\n ### Verificando nosso JWT \n\n  \n\n Para verificar nosso token podemos utilizar um método da própria biblioteca [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken) chamado `decode` passando o token gerado. \n\n  \n\n ```jsx \n\n const tokenGerado = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5vbWVAYWx1cmEuY29tLmJyIiwicGFzc3dvcmQiOiJIdUVLVzQ4OSFqNDQ1KiIsImlhdCI6MTY1MTY4MzUxNywiZXhwIjoxNjgzMjQxMTE3LCJzdWIiOiIxIn0.t0UuIAxJ1NPXANtlBOKfHfLsePF4LRPu4RA2WMkJl6A'; \n\n  \n\n console.log(jwt.decode(tokenGerado)); \n\n ``` \n\n  \n\n A saída deste código é: \n\n  \n\n ```jsx \n\n { \n\n   email: 'nome@alura.com.br', \n\n   password: 'HuEKW489!j445*', \n\n   iat: 1651683517, \n\n   exp: 1683241117, \n\n   sub: '1' \n\n } \n\n ``` \n\n  \n\n Onde os parâmetros `iat`, `exp` e `sub` são respectivamente, as datas de criação e expiração, no formato UTC, em que o token foi criado e em que expirará, e o `subject` que passamos no nosso código com valor 1. Outra alternativa para verificar nosso token é acessando o link: [https://jwt.io/](https://jwt.io/). Neste caso, só precisamos passar o token gerado e iremos visualizar as informações decodificadas. \n\n  \n\n Agora, você deve estar se perguntando: “Agora que eu sei o que é e como funciona um JSON Web Token, como usá-lo em minhas aplicações front-end?” \n\n  \n\n Vamos descobrir! \n\n  \n\n ### Autenticação com tokens \n\n  \n\n Imagine que você é uma pessoa desenvolvedora e está criando o front-end de uma aplicação para um banco. Na página de login você pega os dados dos usuários e envia esses dados para uma API utilizando o fetch ou axios, por exemplo. \n\n  \n\n ``` \n\n fetch(`${baseUrl}/auth/login`, { \n\n method: ‘POST’ \n\n headers: { \n\n  ‘Content Type’: ‘Application/json’, \n\n }, \n\n body: usuário, \n\n }) \n\n .then((resposta) => { \n\n ...alguma coisa \n\n }) \n\n .catch((erro) => { \n\n ...alguma coisa \n\n }); \n\n  \n\n ``` \n\n  \n\n O servidor irá pegar esses dados e, por meio de uma lógica, irá retornar um token que vai identificar aquele usuário. Agora, toda vez que este usuário logar na plataforma, ele passará por uma **autenticação** e, se estiver tudo certo com os dados, será **autorizado** a acessar determinadas áreas da aplicação, como ver o saldo. Geralmente essa **codificação** e **geração** de tokens é realizada pelo back-end, mas você precisará garantir que este usuário logado possa continuar acessando outras áreas da aplicação. \n\n  \n\n Você também pode salvar o token na *session storage* ou *local storage* do seu navegador, para garantir que, enquanto o token não expirar, o usuário permaneça logado na aplicação. Além disso, é importante que, ao efetuar o login, o usuário seja redirecionado para uma página Home, onde ele poderá ver outras funcionalidades da aplicação.  \n\n  \n\n Quando este usuário tentar acessar a página que mostra o seu saldo, por exemplo, você pode fazer uma requisição, usando axios ou fetch passando no headers um campo “Authorization” com o token gerado. Isso irá fazer com que o servidor verifique se o usuário tem permissão ou não de acessar aquela página específica. \n\n  \n\n ``` \n\n fetch(`${baseUrl}/saldo`, { \n\n headers: { \n\n  ‘Authorization’: Token, \n\n }, \n\n }) \n\n .then((resposta) => { \n\n ...alguma coisa \n\n }) \n\n .catch((erro) => { \n\n ...alguma coisa \n\n }); \n\n ``` \n\n  \n\n Quando o usuário fizer *logout* na nossa aplicação, você pode redirecioná-lo para outra página, e quando o token expirar, você redireciona o usuário para a página de login novamente.  \n\n  \n\n ### Conclusão \n\n  \n\n Quanta coisa legal não é mesmo?  \n\n  \n\n Neste artigo, você entendeu o que são JSON Web Tokens, para que servem, quais seus componentes e como utilizá-los em suas aplicações. Você também viu como utilizar tokens em uma aplicação front-end para autenticação de usuários. \n\n  \n\n Na Alura, temos a [formação de Next.js](https://cursos.alura.com.br/formacao-next-js) que está espetacular! Você pode aplicar todo esse conhecimento de JWT em uma aplicação real no curso de **[Next.js: autenticação e gerenciamento de Tokens](https://cursos.alura.com.br/course/nextjs-autenticacao-gerenciamento-tokens)**.  \n\n "
    }
]